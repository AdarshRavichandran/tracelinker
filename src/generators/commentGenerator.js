/**
 * Generates PR comment with traceability summary
 */

function generateComment(summary, commentConfig = {}) {
  const template = commentConfig.template || 'default';

  switch (template) {
  case 'minimal':
    return generateMinimalComment(summary);
  case 'detailed':
    return generateDetailedComment(summary);
  case 'default':
  default:
    return generateDefaultComment(summary);
  }
}

function generateDefaultComment(summary) {
  const issueStatus = summary.has_issue_link ? '✅' : '⚠️';
  const testStatus = summary.has_test_changes ? '✅' : '⚠️';

  let comment = '## 🔗 TraceLinker Summary\n\n';

  // Linked Issues
  comment += `### ${issueStatus} Linked Issues\n`;
  if (summary.linked_issues.length > 0) {
    comment += summary.linked_issues
      .map(issue => `- Fixes #${issue}`)
      .join('\n');
  } else {
    comment += '- No issues linked\n';
  }
  comment += '\n';

  // Changed Files
  comment += `### 📝 Changed Files (${summary.changed_files.length})\n`;
  const filesToShow = summary.changed_files.slice(0, 10);
  comment += filesToShow.map(file => `- \`${file}\``).join('\n');
  if (summary.changed_files.length > 10) {
    comment += `\n- ... and ${summary.changed_files.length - 10} more`;
  }
  comment += '\n\n';

  // Test Files
  comment += `### ${testStatus} Tests Updated\n`;
  if (summary.test_files.length > 0) {
    comment += summary.test_files.map(file => `- \`${file}\``).join('\n');
  } else {
    comment += '- No test files changed\n';
  }
  comment += '\n';

  // Status
  const overallStatus = summary.has_issue_link && summary.has_test_changes ? '✅' : '⚠️';
  comment += `---\n**Status:** ${overallStatus} `;

  if (summary.has_issue_link && summary.has_test_changes) {
    comment += 'All checks passed';
  } else {
    const missing = [];
    if (!summary.has_issue_link) {
      missing.push('issue link');
    }
    if (!summary.has_test_changes) {
      missing.push('test changes');
    }
    comment += `Missing: ${missing.join(', ')}`;
  }

  comment += '\n\n_Generated by [TraceLinker](https://github.com/tracelinker-org/tracelinker)_';

  return comment;
}

function generateMinimalComment(summary) {
  const issueEmoji = summary.has_issue_link ? '✅' : '⚠️';
  const testEmoji = summary.has_test_changes ? '✅' : '⚠️';

  return `🔗 **TraceLinker:** ${issueEmoji} Issues linked (${summary.linked_issues.length}) | ${testEmoji} Tests updated (${summary.test_files.length})`;
}

function generateDetailedComment(summary) {
  let comment = generateDefaultComment(summary);

  // Add file-by-file breakdown
  comment += '\n\n### 📊 File-by-File Breakdown\n\n';
  comment += '| File | Type |\n';
  comment += '|------|------|\n';

  summary.changed_files.forEach(file => {
    const isTest = summary.test_files.includes(file);
    const type = isTest ? '🧪 Test' : '📝 Code';
    comment += `| \`${file}\` | ${type} |\n`;
  });

  return comment;
}

module.exports = {
  generateComment
};

